#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require_relative '../config/application'

class CLI < Thor
  desc "startwallet", "Start wallet as daemon."
  def startwallet
    return if FCSWallet::Util.wallet_running?
    `bin/wallet -d`
  end

  desc "stopwallet", "Stop wallet daemon."
  def stopwallet
    `cat #{"#{__dir__}/../tmp/walletd.pid"} | xargs kill`
  end

  desc "statuswallet", "Show wallet status."
  def statuswallet
    pid = FCSWallet::Util.wallet_running?

    print "Status: "
    if pid
      say "Running", [:green, :bold]
      say "PID: #{pid}" if pid
    else
      say "Stopped", [:red, :bold]
    end
  end

  desc "getbalance <color_id>", "Get current balance. If color_id specified show balance of token."
  def getbalance(color_id = nil)
    balance = if color_id.nil?
                FCSWallet::UTXO.where.not(token: 'TPC').sum(:value)
              else
                FCSWallet::UTXO.where(token: color_id).sum(:value)
              end

    say balance.to_s.reverse.gsub( /(\d{3})(?=\d)/, '\1,').reverse
  end

  desc "listunspent", "Show UTXO list"
  def listunspent
    pp FCSWallet::UTXO.all.map(&:attributes)
  end

  desc "dumpprivkey", "Dump private key."
  def dumpprivkey
    key = nil
    File.open("credentials/jwk.json") do |f|
      jwk_hash = JSON.load(f)
      jwk = JSON::JWK.new(jwk_hash)
      key = Tapyrus::Key.new(priv_key: jwk.to_key.private_key.to_s(16).downcase.encode('US-ASCII'), key_type: 0)
    end

    say key.priv_key
  end

  desc "dumppubkey", "Dump public key."
  def dumppubkey
    key = nil
    File.open("credentials/jwk.json") do |f|
      jwk_hash = JSON.load(f)
      jwk = JSON::JWK.new(jwk_hash)
      key = Tapyrus::Key.new(priv_key: jwk.to_key.private_key.to_s(16).downcase.encode('US-ASCII'), key_type: 0)
    end

    say key.pubkey
  end

  desc "createdid", "Create DID."
  def createdid
    if File.exist?("#{__dir__}/../config/credentials/did")
      say "DID is already set."
      exit(1)
    end

    did = FCSWallet::DID.generate

    File.open("#{__dir__}/../config/credentials/did", 'w') { |f| f << did.long }
    File.open("#{__dir__}/../config/credentials/jwk.json", 'w') { |f| f << did.jwk.to_json }

    say did.long
  end

  desc "showdid", "Show DID stored in the wallet."
  def showdid
    unless File.exist?("#{__dir__}/../config/credentials/did")
      say "DID does not exist."
      exit(1)
    end

    long = File.open("#{__dir__}/../config/credentials/did", 'r') { |f| f.read }.chomp

    say long
  end

  desc "removedid", "Remove DID from the wallet."
  def removedid
    unless File.exist?("#{__dir__}/../config/credentials/did")
      say "DID does not exist."
      exit(1)
    end

    long = File.open("#{__dir__}/../config/credentials/did", 'r') { |f| f.read }.chomp
    did = FCSWallet::DID.new(long:)

    say "Found: #{did.long}"
    text = "Do you really delete the DID information from the wallet?\nThe DID is never actually deleted, but the private key information on this wallet is lost. (y/N)"

    if yes? text
      File.delete("#{__dir__}/../config/credentials/did")
      File.delete("#{__dir__}/../config/credentials/jwk.json")

      say "config/credentials/did and config/credentials/jwk.json removed."
    else
      say "Canceled."
      exit(1)
    end
  end

  desc "storevc <vc>", "Store VC."
  def storevc(vc)
    if File.exist?("#{__dir__}/../config/credentials/vc")
      say "VC is already stored."
      unless yes? "Overwrite? (y/N)"
        say "Canceled."
        exit(1)
      end
    end

    File.open("#{__dir__}/../config/credentials/vc", 'w') { |f| f << vc }

    say "config/credentials/vc saved."
  end

  desc "showvc", "Show VC."
  def showvc
    unless File.exist?("#{__dir__}/../config/credentials/vc")
      say "VC does not exist."
      exit(1)
    end

    vc = File.open("#{__dir__}/../config/credentials/vc", 'r') { |f| f.read }.chomp

    say vc
  end

  desc "removevc", "Remove VC from the wallet."
  def removevc
    unless File.exist?("#{__dir__}/../config/credentials/vc")
      say "VC does not exist."
      exit(1)
    end

    vc = File.open("#{__dir__}/../config/credentials/vc", 'r') { |f| f.read }.chomp

    say "Found: #{vc}"
    text = "Do you really delete the VC information from the wallet? (y/N)"

    if yes? text
      File.delete("#{__dir__}/../config/credentials/vc")

      say "config/credentials/vc removed."
    else
      say "Canceled."
      exit(1)
    end
  end

  # MEMO: amount 指定できるようにしているがめんどいので UTXO.first を固定で送ります
  desc "sendtovc <vc> <amount> <output only request id>", "Send payment request to issuer."
  def sendtovc(vc_jwt, amount, output_only_request_id)
    utxo = FCSWallet::UTXO.where.not(token: 'TPC').first

    # get user did
    did = File.open("#{__dir__}/../config/credentials/did", 'r') { |f| f.read }.chomp

    # get brand did from utxos
    brand_pubkey = Tapyrus::Script.parse_from_payload(utxo.script_pubkey.htb).to_s.split(" ")[5]

    # get merchant and acquirer did from vc
    vc = FCSWallet::VC.new(vc_jwt)
    verify_result = vc.verify

    merchant_key = FCSWallet::Key.from_jwk(verify_result[:holder_pubkey_jwk])
    acquirer_key = FCSWallet::Key.from_jwk(verify_result[:issuer_pubkey_jwk])
    script_pubkey = Tapyrus::Script.new << utxo.token << OP_COLOR << 2 << [merchant_key.pubkey, acquirer_key.pubkey, brand_pubkey] << 3 << OP_CHECKMULTISIG

    # create transaction
    key = FCSWallet::Key.from_jwk
    tx = Tapyrus::Tx.new
    tx.in << Tapyrus::TxIn.new(out_point: Tapyrus::OutPoint.from_txid(utxo.txid, utxo.vout))
    tx.out << Tapyrus::TxOut.new(value: utxo.value, script_pubkey:)

    # send request to url with request_id
    request_id = SecureRandom.uuid
    response = Net::HTTP.post(
      URI("#{ENV['ISSUER_URL']}/payment/create"),
      { request_id:, user_did: did, tx: tx.to_hex, vc: vc_jwt }.to_json,
      'Content-Type' => 'application/json'
    )

    body = JSON.parse(response.body)
    tx = Tapyrus::Tx.parse_from_payload(body['tx'].htb)

    # sign token input
    sig_hash = tx.sighash_for_input(0, Tapyrus::Script.parse_from_payload(utxo.script_pubkey.htb))
    signature = key.sign(sig_hash) + [Tapyrus::SIGHASH_TYPE[:all]].pack('C')
    tx.in[0].script_sig << OP_0
    tx.in[0].script_sig << signature

    response = Net::HTTP.post(
      URI("#{ENV['ISSUER_URL']}/payment/confirm"),
      { request_id:, user_did: did, tx: tx.to_hex, vc: vc_jwt, lock_script: utxo.script_pubkey }.to_json,
      'Content-Type' => 'application/json'
    )

    body = JSON.parse(response.body)
    txid = body['txid']

    if output_only_request_id
      say request_id
    else
      say "Completed."
      say "  Request ID: #{request_id}"
      say "  TXID: #{txid}"
    end
  end

  # MEMO: やってられんので UTXO.first を固定で送ります
  desc "sendwithdrawrequest <amount> <output only request id>", "Send withdraw request to acquirer."
  def sendwithdrawrequest(amount, output_only_request_id)
    utxo = FCSWallet::UTXO.where.not(token: 'TPC').first

    # get merchant did
    did = File.open("#{__dir__}/../config/credentials/did", 'r') { |f| f.read }.chomp

    # get brand did from utxos
    brand_pubkey = Tapyrus::Script.parse_from_payload(utxo.script_pubkey.htb).to_s.split(" ")[5]

    # create transaction
    key = FCSWallet::Key.from_jwk
    tx = Tapyrus::Tx.new
    tx.in << Tapyrus::TxIn.new(out_point: Tapyrus::OutPoint.from_txid(utxo.txid, utxo.vout))
    tx.out << Tapyrus::TxOut.new(value: utxo.value, script_pubkey: Tapyrus::Script.to_cp2pkh(Tapyrus::Color::ColorIdentifier.parse_from_payload(utxo.token.htb), Tapyrus.hash160(brand_pubkey)))

    # send request to url with request_id
    request_id = SecureRandom.uuid
    response = Net::HTTP.post(
      URI("#{ENV['ACQUIRER_URL']}/withdraw/create"),
      { request_id:, amount: utxo.value, merchant_did: did, tx: tx.to_hex }.to_json,
      'Content-Type' => 'application/json'
    )
    body = JSON.parse(response.body)
    tx = Tapyrus::Tx.parse_from_payload(body['tx'].htb)

    # sign token input
    sig_hash = tx.sighash_for_input(0, Tapyrus::Script.parse_from_payload(utxo.script_pubkey.htb))
    signature = key.sign(sig_hash) + [Tapyrus::SIGHASH_TYPE[:all]].pack('C')
    tx.in[0].script_sig << OP_0
    tx.in[0].script_sig << signature

    response = Net::HTTP.post(
      URI("#{ENV['ACQUIRER_URL']}/withdraw/confirm"),
      { request_id:, merchant_did: did, tx: tx.to_hex, lock_script: utxo.script_pubkey }.to_json,
      'Content-Type' => 'application/json'
    )
    body = JSON.parse(response.body)
    merchant_to_brand_txid = body['merchant_to_brand_txid']
    brand_to_issuer_txid = body['brand_to_issuer_txid']
    burn_txid = body['burn_txid']

    if output_only_request_id
      say request_id
    else
      say "Completed."
      say "  Request ID: #{request_id}"
      say "  merchant_to_brand_txid: #{merchant_to_brand_txid}"
      say "  brand_to_issuer_txid: #{brand_to_issuer_txid}"
      say "  burn_txid: #{burn_txid}"
    end
  end
end

CLI.start(ARGV)
